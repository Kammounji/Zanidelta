<?php

namespace Association\GestionAssociationBundle\Controller;

use Association\GestionAssociationBundle\Entity\Evenement;
use Association\GestionAssociationBundle\Entity\Participation;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;

class EvenementController extends Controller
{

    public function ajoutevenAction(Request $request)
    {

        $event = new Evenement();
        $form = $this->createForm('Association\GestionAssociationBundle\Form\EvenementType', $event);
        $form->handleRequest($request);


        if ($form->isSubmitted()) {

            $em = $this->getDoctrine()->getManager();
            $event->upload();
            $user=$this->getUser();



            $uid=$user->getId();
            $nom=$user->getNom();
            $event->setIdAssociation($uid);
            $event->setNomAssociation($nom);
            $event->setEtat(false);


            $em->persist($event);
            $em->flush();

            //  return $this->redirectToRoute('AssociationGestionAssociationBundle:Default:layout.html.twig');
            //  return $this->redirectToRoute('moddetaileven', array('id' => $event->getId()));
            $this->redirectToRoute('evenement');

        }

        return $this->render('AssociationGestionAssociationBundle:gestion_evenement:ajout-evennement.html.twig', array(
            'event' => $event,
            'form' => $form->createView(),
        ));
    }


    public function moddetailevenAction(Request $request,$id)
    {



        $em=$this->getDoctrine()->getManager();
        $ev=$em->getRepository("AssociationGestionAssociationBundle:Evenement")->find($id);
        $form = $this->createForm('Association\GestionAssociationBundle\Form\EvenementType', $ev);
        $form->handleRequest($request);

        if($form->isValid())
        {

            $ev->upload();
            $em=$this->getDoctrine()->getManager();
            $em->persist($ev);
            $em->flush();
            //   return $this->redirectToRoute('evenementAdmin',array('cat'=>$ev));
        }
        return $this->render('AssociationGestionAssociationBundle:gestion_evenement:modif-detail-evennement.html.twig',array('form'=>$form->createView(),'id'=>$id));




    }
    public function evenementAction()
    {
        $em=$this->getDoctrine()->getManager();
        $event=$em->getRepository("AssociationGestionAssociationBundle:Evenement")->findAll();
        $cat=$em->getRepository("AssociationGestionAssociationBundle:Categorie")->findAll();

        return $this->render('AssociationGestionAssociationBundle:gestion_evenement:evenement.html.twig',array(
            'event'=>$event,'cat'=>$cat
        ));
    }

    public function modsuppevennAction()
    {
        $user=$this->getUser();
        $uid=$user->getId();
        $em=$this->getDoctrine()->getManager();
        $event=$em->getRepository("AssociationGestionAssociationBundle:Evenement")->DQL($uid);

        return $this->render('AssociationGestionAssociationBundle:gestion_evenement:mod-supp-evennement.html.twig',array(
            'event'=>$event
        ));
    }

   public function deleteAction($id){
        $em=$this->getDoctrine()->getManager();

        $event=$em->getRepository("AssociationGestionAssociationBundle:Evenement")->find($id);
        $em->remove($event);
        $em->flush();
        // return $this->redirectToRoute('liste');
        return $this->modsuppevennAction();

    }

    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    public function evenmeduimAction()
    {
        $em=$this->getDoctrine()->getManager();
        $user=$this->getUser();

        $id=$user->getId();

        $event=$em->getRepository("AssociationGestionAssociationBundle:Evenement")->findAll();
        //$participation=$em->getRepository("AssociationGestionAssociationBundle:Participation")->reserver($id);


        return $this->render('AssociationGestionAssociationBundle:gestion_evenement:evenmeduim.html.twig',array(
            'event'=>$event,
        ));
    }

    public  function trierEventAction()
    {

        $em=$this->getDoctrine()->getManager();
        $event=$em->getRepository("AssociationGestionAssociationBundle:Evenement")->trierEvenement();
        $cat=$em->getRepository("AssociationGestionAssociationBundle:Categorie")->findAll();

        return $this->render('AssociationGestionAssociationBundle:gestion_evenement:evenement.html.twig',array(
            'event'=>$event,'cat'=>$cat
        ));

    }

    public  function trierEventNombreAction()
    {

        $em=$this->getDoctrine()->getManager();
        $event=$em->getRepository("AssociationGestionAssociationBundle:Evenement")->trierEvenementNombre();
        $cat=$em->getRepository("AssociationGestionAssociationBundle:Categorie")->findAll();

        return $this->render('AssociationGestionAssociationBundle:gestion_evenement:evenement.html.twig',array(
            'event'=>$event,'cat'=>$cat
        ));

    }


    public function reserverEventAction($id)
    {

        $par= new Participation();

        $em=$this->getDoctrine()->getManager();
        $em1=$this->getDoctrine()->getManager();
        $ev=$em->getRepository("AssociationGestionAssociationBundle:Evenement")->find($id);
        $user=$this->getUser();

        $uid=$user->getId();
$par->setIdClient($uid);
        $int = (int)$id;
$par->setIdEvenement($ev);


$nb=$ev->getNbrParticipants()-1;
            $ev->setNbrParticipants($nb);

            $em->persist($ev);
            $em->persist($par);

            $em->flush();
            //   return $this->redirectToRoute('evenementAdmin',array('cat'=>$ev));

        return $this->evendetailAction($id);




    }

    public function afficheCatAction($id)
    {
        $em=$this->getDoctrine()->getManager();
        $event=$em->getRepository("AssociationGestionAssociationBundle:Evenement")->filtreCat($id);
        $cat=$em->getRepository("AssociationGestionAssociationBundle:Categorie")->findAll();

        return $this->render('AssociationGestionAssociationBundle:gestion_evenement:evenement.html.twig',array(
            'event'=>$event,'cat'=>$cat
        ));
    }

    public function evendetailAction($id)

    {

        $em=$this->getDoctrine()->getManager();
        $user=$this->getUser();

        $uid=$user->getId();
        $event=$em->getRepository("AssociationGestionAssociationBundle:Evenement")->find($id);
        $participation=$em->getRepository("AssociationGestionAssociationBundle:Participation")->reserver($uid,$id);

//        var_dump($participation);
//        die();

        return $this->render('AssociationGestionAssociationBundle:gestion_evenement:evendetail.html.twig',array(
            'event'=>$event,'part'=>$participation
        ));

    }

    public function annulerEventAction($id,$id1)
    {

        $par= new Participation();

        $em=$this->getDoctrine()->getManager();
        $em1=$this->getDoctrine()->getManager();
        $ev=$em->getRepository("AssociationGestionAssociationBundle:Evenement")->find($id);
        $par=$em->getRepository("AssociationGestionAssociationBundle:Participation")->find($id1);



        $nb=$ev->getNbrParticipants()+1;
        $ev->setNbrParticipants($nb);

        $em->persist($ev);
        $em->flush();
        $em->remove($par);

        $em->flush();
        //   return $this->redirectToRoute('evenementAdmin',array('cat'=>$ev));

        return $this->evendetailAction($id);




    }


}
